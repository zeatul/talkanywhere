<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.taw.scene.mapper.ScenePicMapper">

	<sql id="columns">
		主键 as "主键" ,
		scene_id as "sceneId" ,
		mid as "mid" ,
		kind as "kind" ,
		scene_name as "sceneName" ,
		pic_id as "picId" ,
		pic_uuid as "picUuid" 
	</sql>
	
	<sql id="where">
		<trim prefix="WHERE" prefixOverrides="AND">		 
			<if test="主键 != null"> AND 主键 = #{主键}  </if>
			<if test="sceneId != null"> AND scene_id = #{sceneId}  </if>
			<if test="mid != null"> AND mid = #{mid}  </if>
			<if test="kind != null"> AND kind = #{kind}  </if>
			<if test="sceneName != null"> AND scene_name = #{sceneName}  </if>
			<if test="picId != null"> AND pic_id = #{picId}  </if>
			<if test="picUuid != null"> AND pic_uuid = #{picUuid}  </if>
		</trim>	
	</sql>
	
	<sql id="where_old">
		<trim prefix="WHERE" prefixOverrides="AND">
			AND 主键 = #{old_主键}
			AND scene_id = #{old_sceneId}
			AND mid = #{old_mid}
			AND kind = #{old_kind}
			AND scene_name = #{old_sceneName}
			AND pic_id = #{old_picId}
			AND pic_uuid = #{old_picUuid}
		</trim>
	</sql>
	
	<sql id="update">
		<set>
			主键 = #{主键},
			scene_id = #{sceneId},
			mid = #{mid},
			kind = #{kind},
			scene_name = #{sceneName},
			pic_id = #{picId},
			pic_uuid = #{picUuid},
		</set>
	</sql>
	
	<sql id="updateWithoutNull">
		<set>
				<if test="主键 != null">主键 = #{主键},</if>
				<if test="sceneId != null">scene_id = #{sceneId},</if>
				<if test="mid != null">mid = #{mid},</if>
				<if test="kind != null">kind = #{kind},</if>
				<if test="sceneName != null">scene_name = #{sceneName},</if>
				<if test="picId != null">pic_id = #{picId},</if>
				<if test="picUuid != null">pic_uuid = #{picUuid},</if>
		</set>
	</sql>
	
	<sql id="pkwhere">
		<trim prefix="WHERE" prefixOverrides="AND">
			AND 主键 = #{主键}
		</trim>
	</sql>
	
	<select id="load"  resultType="ScenePicDomain">
		SELECT 
		<include refid="columns" />
		FROM t_tm_scene_pic
		<include refid="pkwhere" />		
	</select>
	
	<select id="loadDynamic" parameterType="hashmap" resultType="ScenePicDomain">
		SELECT 		
		<include refid="columns" />
		FROM t_tm_scene_pic
		<include refid="where" />
		<if test="_orderby != null">ORDER BY ${_orderby}</if>
		<if test="_offset != null">LIMIT #{_offset},#{_limit}</if>	
	</select>


	<select id="count"  parameterType="hashmap" resultType="integer">
		SELECT count(*) 
		FROM t_tm_scene_pic
		<include refid="where" />
	</select>
	
	<insert id="insert"  parameterType="ScenePicDomain">
		INSERT INTO t_tm_scene_pic (			
				主键,				
				scene_id,				
				mid,				
				kind,				
				scene_name,				
				pic_id,				
				pic_uuid				
		)		
		VALUES (	
			#{主键},
			#{sceneId},
			#{mid},
			#{kind},
			#{sceneName},
			#{picId},
			#{picUuid}
		) 
	</insert>
	
	<delete id="delete" >
		DELETE FROM t_tm_scene_pic
		<include refid="pkwhere" />	
	</delete>
	
	<delete id="deleteDynamic" parameterType="hashmap">
		DELETE FROM t_tm_scene_pic
		<include refid="where" />
	</delete>

	<update id="update" parameterType="ScenePicDomain">
		UPDATE t_tm_scene_pic	
		<include refid="update" />
		<include refid="pkwhere" />	
	</update>
	
	<update id="updateWithoutNull" parameterType="ScenePicDomain">
		UPDATE t_tm_scene_pic
		<include refid="updateWithoutNull"/>
		<include refid="pkwhere" />	
	</update>
	
	<update id="updateDynamic" parameterType="hashmap">
		UPDATE t_tm_scene_pic	
		<include refid="update" />
		<include refid="where_old" />
	</update>
	
	
	
</mapper>