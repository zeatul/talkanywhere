<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.taw.user.mapper.VersionMapper">

	<sql id="columns">
		id as "id" ,
		model as "model" ,
		version as "version" ,
		description as "description" ,
		forced as "forced" ,
		crdt as "crdt" ,
		updt as "updt" 
	</sql>
	
	<sql id="where">
		<trim prefix="WHERE" prefixOverrides="AND">		 
			<if test="id != null"> AND id = #{id}  </if>
			<if test="model != null"> AND model = #{model}  </if>
			<if test="version != null"> AND version = #{version}  </if>
			<if test="description != null"> AND description = #{description}  </if>
			<if test="forced != null"> AND forced = #{forced}  </if>
			<if test="crdt != null"> AND crdt = #{crdt}  </if>
			<if test="updt != null"> AND updt = #{updt}  </if>
		</trim>	
	</sql>
	
	<sql id="where_old">
		<trim prefix="WHERE" prefixOverrides="AND">
			AND id = #{old_id}
			AND model = #{old_model}
			AND version = #{old_version}
			AND description = #{old_description}
			AND forced = #{old_forced}
			AND crdt = #{old_crdt}
			AND updt = #{old_updt}
		</trim>
	</sql>
	
	<sql id="update">
		<set>
			model = #{model},
			version = #{version},
			description = #{description},
			forced = #{forced},
			crdt = #{crdt},
			updt = #{updt},
		</set>
	</sql>
	
	<sql id="updateWithoutNull">
		<set>
				<if test="model != null">model = #{model},</if>
				<if test="version != null">version = #{version},</if>
				<if test="description != null">description = #{description},</if>
				<if test="forced != null">forced = #{forced},</if>
				<if test="crdt != null">crdt = #{crdt},</if>
				<if test="updt != null">updt = #{updt},</if>
		</set>
	</sql>
	
	<sql id="pkwhere">
		<trim prefix="WHERE" prefixOverrides="AND">
			AND id = #{id}
		</trim>
	</sql>
	
	<select id="load"  resultType="VersionDomain">
		SELECT 
		<include refid="columns" />
		FROM t_um_version
		<include refid="pkwhere" />		
	</select>
	
	<select id="loadDynamic" parameterType="hashmap" resultType="VersionDomain">
		SELECT 		
		<include refid="columns" />
		FROM t_um_version
		<include refid="where" />
		<if test="_orderby != null">ORDER BY ${_orderby}</if>
		<if test="_offset != null">LIMIT #{_offset},#{_limit}</if>	
	</select>


	<select id="count"  parameterType="hashmap" resultType="integer">
		SELECT count(*) 
		FROM t_um_version
		<include refid="where" />
	</select>
	
	<insert id="insert"  parameterType="VersionDomain">
		INSERT INTO t_um_version (			
				id,				
				model,				
				version,				
				description,				
				forced,				
				crdt,				
				updt				
		)		
		VALUES (	
			#{id},
			#{model},
			#{version},
			#{description},
			#{forced},
			#{crdt},
			#{updt}
		) 
	</insert>
	
	<delete id="delete" >
		DELETE FROM t_um_version
		<include refid="pkwhere" />	
	</delete>
	
	<delete id="deleteDynamic" parameterType="hashmap">
		DELETE FROM t_um_version
		<include refid="where" />
	</delete>

	<update id="update" parameterType="VersionDomain">
		UPDATE t_um_version	
		<include refid="update" />
		<include refid="pkwhere" />	
	</update>
	
	<update id="updateWithoutNull" parameterType="VersionDomain">
		UPDATE t_um_version
		<include refid="updateWithoutNull"/>
		<include refid="pkwhere" />	
	</update>
	
	<update id="updateDynamic" parameterType="hashmap">
		UPDATE t_um_version	
		<include refid="update" />
		<include refid="where_old" />
	</update>
	
	
	
</mapper>