<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hawk.pub.sms.mapper.FeedbackMapper">

	<sql id="columns">
		id as "id" ,
		message_id as "messageId" ,
		send_time as "sendTime" ,
		feedback as "feedback" 
	</sql>
	
	<sql id="where">
		<trim prefix="WHERE" prefixOverrides="AND">		 
			<if test="id != null"> AND id = #{id}  </if>
			<if test="messageId != null"> AND message_id = #{messageId}  </if>
			<if test="sendTime != null"> AND send_time = #{sendTime}  </if>
			<if test="feedback != null"> AND feedback = #{feedback}  </if>
		</trim>	
	</sql>
	
	<sql id="where_old">
		<trim prefix="WHERE" prefixOverrides="AND">
			AND id = #{old_id}
			AND message_id = #{old_messageId}
			AND send_time = #{old_sendTime}
			AND feedback = #{old_feedback}
		</trim>
	</sql>
	
	<sql id="update">
		<set>
			message_id = #{messageId},
			send_time = #{sendTime},
			feedback = #{feedback},
		</set>
	</sql>
	
	<sql id="updateWithoutNull">
		<set>
				<if test="messageId != null">message_id = #{messageId},</if>
				<if test="sendTime != null">send_time = #{sendTime},</if>
				<if test="feedback != null">feedback = #{feedback},</if>
		</set>
	</sql>
	
	<sql id="pkwhere">
		<trim prefix="WHERE" prefixOverrides="AND">
			AND id = #{id}
		</trim>
	</sql>
	
	<select id="load"  resultType="FeedbackDomain">
		SELECT 
		<include refid="columns" />
		FROM t_sm_feedback
		<include refid="pkwhere" />		
	</select>
	
	<select id="loadFeedbackDynamic" parameterType="hashmap" resultType="FeedbackDomain">
		SELECT 		
		<include refid="columns" />
		FROM t_sm_feedback
		<include refid="where" />
		<if test="_orderby != null">ORDER BY ${_orderby}</if>
		<if test="_offset != null">LIMIT #{_offset},#{_limit}</if>	
	</select>


	<select id="count"  parameterType="hashmap" resultType="integer">
		SELECT count(*) 
		FROM t_sm_feedback
		<include refid="where" />
	</select>
	
	<insert id="insert"  parameterType="FeedbackDomain">
		INSERT INTO t_sm_feedback (			
				id,				
				message_id,				
				send_time,				
				feedback				
		)		
		VALUES (	
			#{id},
			#{messageId},
			#{sendTime},
			#{feedback}
		) 
	</insert>
	
	<delete id="delete" >
		DELETE FROM t_sm_feedback
		<include refid="pkwhere" />	
	#end
	</delete>
	
	<delete id="deleteDynamic" parameterType="hashmap">
		DELETE FROM t_sm_feedback
		<include refid="where" />
	</delete>

	<update id="updateFeedback" parameterType="FeedbackDomain">
		UPDATE t_sm_feedback	
		<include refid="update" />
		<include refid="pkwhere" />	
	</update>
	
	<update id="updateFeedbackWithoutNull" parameterType="FeedbackDomain">
		UPDATE t_sm_feedback
		<include refid="updateWithoutNull"/>
		<include refid="pkwhere" />	
	</update>
	
	<update id="updateFeedbackDynamic" parameterType="hashmap">
		UPDATE t_sm_feedback	
		<include refid="update" />
		<include refid="where_old" />
	</update>
	
	
	
</mapper>